演習問題1

１．次の式の意味を考える。実際に式を評価して値を求めよ。

(1)  2 + 3 * 4 / 5 
(2)  sin 1 + cos 2 
(3)  2000 `div` 13 + 2000 `mod` 13
(4)  (\x -> x+1) 3
(5)  (+3) 5
(6)  chr (3 + ord 'A')
(7)  fst (even 4 && odd 3, 1/0)
(8)  [x+y | x<-[1..10], y<-[10..15]]
(9)  [x | x<-["This", "is", "a", "string"], head x == 's']
(10) [j | i<-[1,-1,2,-2], i>0, j<-[1..i]]
(11) take 3 [1..10]
(12) takeWhile (<5) [1..10]
(13) map odd [1..10]
(14) foldr (+) 0 (map sqrt [1..10])
(15) filter ((3>=) . (`mod` 2)) [1..10000] 
(16) length ["We", "like", "lists."]
(17) length (concat ["We", "like", "lists."])
(18) zip [1..10] (map chr [65..74])
(19) zipWith (+) [1..10] [11..20]
(20) let x=4; y=5+x in x+y
(21) let y=5+4; x=4 in x+y
(22) x+y where x=4; y=5+x
(23) (\x y -> x*x + y*y) 3 4
(24) (\(x,y) -> x*x + y*y) (3,4)

2．（教科書2.2）対応関係を表す抽象型 Assoc a b　は　
     type Assoc = [(a,b)] 
のように実現することができる。次のプログラムを完成し、
テストせよ。

(1) 次のプログラムを完成し、ファイルに保存せよ。

type Assoc a b = [(a,b)]

none :: Assoc a b   
none = []

update :: Assoc a b -> a -> b -> Assoc a b
update h x v = (x,v) : h

lookup1 :: Eq a => Assoc a b -> a -> b
lookup1 [] x = undefined
lookup1 ((x',v'):h') x 
      | x==x'     = ____________
      | otherwise = ____________

(2) 上のファイルをhugsにロードして、次の式でテストせよ。
　　(i)   lookup1 none "x"
    (ii)  lookup1 (update none "x" 5) "x"
    (iii) lookup1 (update none "x" 5) "y"
    (iv)  lookup1 (update (update none "x" 5) "x" 3) "x"
 

3. 式　a*a + b*b = c*c + d*d を満たす　0<a,b,c,d<=n の範囲にあるすべての４つの数の組 (a,b,c,d) を求めるプログラムをかけ。　
（ヒント：リストの内包表記を使って、次の型をもつ関数
　　　　　    gen :: Int -> [(Int,Int,Int,Int)]
　　　　　を定義すればよい。）

